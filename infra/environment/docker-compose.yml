version: '3.9'

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: sqlserver
    environment:
      SA_PASSWORD: ${DB_SA_PASSWORD}
      ACCEPT_EULA: ${ACCEPT_EULA}
    ports:
      - "1433:1433"
    networks:
      - backend
    volumes:
      - ../sql:/scripts

  sql-init:
    image: mcr.microsoft.com/mssql-tools
    container_name: sql-init
    depends_on:
      - sqlserver
    volumes:
      - ../sql:/scripts
    entrypoint: >
      /bin/bash -c "
      sleep 60 &&
      /opt/mssql-tools/bin/sqlcmd -S sqlserver -U sa -P ${DB_SA_PASSWORD} -i /scripts/init.sql"
    networks:
      - backend

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASS}
    ports:
      - "27017:27017"
    networks:
      - backend

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
  lgtm:
    image: grafana/otel-lgtm
    container_name: lgtm
    ports:
      - "3001:3000"
      - "4317:4317"
      - "4318:4318"
      - "12345:12345"
    environment:
      - OTEL_SERVICE_NAME=lgtm
    networks:
      - backend

  orders-command-api:
    build:
      context: ../../src
      dockerfile: OrderService.CommandAPI/OrderService.CommandAPI.API/Dockerfile
    container_name: orders-command-api
    ports:
      - "8080:80"
    depends_on:
      - sqlserver
      - rabbitmq
    environment:
      - SERVICE_NAME=orders-command-api
    networks:
      - backend

  orders-query-api:
    build:
      context: ../../src
      dockerfile: OrderService.QueryAPI/OrderService.QueryAPI.API/Dockerfile
    container_name: orders-query-api
    ports:
      - "8081:80"
    depends_on:
      - mongodb
      - redis
    environment:
      - SERVICE_NAME=orders-query-api
    networks:
      - backend

  orders-worker:
    build:
      context: ../../src
      dockerfile: OrderService.QueryAPI/OrderService.QueryAPI.Worker/Dockerfile
    container_name: orders-worker
    depends_on:
      - mongodb
      - rabbitmq
    environment:
      - SERVICE_NAME=orders-worker
    networks:
      - backend

  api-gateway:
    build:
      context: ../../src
      dockerfile: Gateway/OcelotApiGateway/Dockerfile
    container_name: api-gateway
    ports:
      - "8082:80"
    depends_on:
      - orders-command-api
      - orders-query-api
    environment:
      - SERVICE_NAME=api-gateway
    networks:
      - backend

    
  frontend:
    image: node:20-alpine
    container_name: frontend
    working_dir: /app
    volumes:
      - ../../frontend/order-management-system:/app
    ports:
      - "3000:3000"
    command: >
      sh -c "
        corepack enable &&
        corepack prepare pnpm@10.10.0 --activate &&
        pnpm install &&
        pnpm build &&
        pnpm start"
    depends_on:
      - api-gateway
    networks:
      - backend

networks:
  backend:
    driver: bridge
